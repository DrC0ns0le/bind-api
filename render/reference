

import (
	"fmt"
	"text/template"
)

type SOA struct {
	PrimaryNS  string
	AdminEmail string
	Serial     int
	Refresh    int
	Retry      int
	Expire     int
	Minimum    int
	TTL        int
}

type Record struct {
	Type    string
	Host    string
	Content string
	TTL     int
}

func main() {
	soa := SOA{
		PrimaryNS:  "ns1.p30.dynect.net.",
		AdminEmail: "zone-admin.dyndns.com.",
		Serial:     2016072701,
		Refresh:    3600,
		Retry:      600,
		Expire:     604800,
		Minimum:    1800,
		TTL:        3600,
	}

	records := []Record{
		{"NS", "@", "ns1.p30.dynect.net.", 86400},
		{"NS", "@", "ns2.p30.dynect.net.", 86400},
		{"NS", "@", "ns3.p30.dynect.net.", 86400},
		{"NS", "@", "ns4.p30.dynect.net.", 86400},
		{"MX", "@", "10 mail.example.com.", 3600},
		{"MX", "@", "20 vpn.example.com.", 3600},
		{"MX", "@", "30 mail.example.com.", 3600},
		{"A", "@", "204.13.248.106", 60},
		{"TXT", "@", "\"v=spf1 includespf.dynect.net ~all\"", 3600},
		{"A", "mail", "204.13.248.106", 14400},
		{"A", "vpn", "216.146.45.240", 60},
		{"A", "webapp", "216.146.46.10", 60},
		{"A", "webapp", "216.146.46.11", 60},
		{"CNAME", "www", "example.com.", 43200},
	}

	t, err := template.New("zonefile").ParseFiles("zonefile.tmpl")
	if err != nil {
		fmt.Println(err)
		return
	}

	err = t.Execute(os.Stdout, struct {
		SOA     SOA
		Records []Record
		Origin  string
	}{
		SOA:     soa,
		Records: records,
		Origin:  "example.com.",
	})
	if err != nil {
		fmt.Println(err)
		return
	}
}

// {{$soa := .SOA}}
// {{$records := .Records}}

// $ORIGIN {{.Origin}}.

// @                      {{.SOA.TTL}} SOA   {{.SOA.PrimaryNS}}. (
//                               {{.SOA.AdminEmail}}.     ; address of responsible party
//                               {{.SOA.Serial}}                 ; serial number
//                               {{.SOA.Refresh}}                       ; refresh period
//                               {{.SOA.Retry}}                        ; retry period
//                               {{.SOA.Expire}}                     ; expire time
//                               {{.SOA.Minimum}}                     ) ; minimum ttl

// {{range $records}}
// {{.Host}} {{.TTL}} {{.Type}} {{.Content}}
// {{end}}